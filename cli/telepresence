#!/usr/bin/env python3
"""
Telepresence CLI tool: local development environment for a remote
Kubernetes cluster.
"""

import argparse
import atexit
from copy import deepcopy
import json
import os
import os.path
import re
import signal
import socket
import ssl
import sys
from functools import wraps
from shutil import rmtree, copy, which
from subprocess import (
    check_output, Popen, CalledProcessError, run, TimeoutExpired, STDOUT,
    DEVNULL
)
from tempfile import mkdtemp, NamedTemporaryFile
from time import sleep, time
from traceback import print_exc
from urllib.error import HTTPError
from urllib.request import urlopen
from uuid import uuid4
import webbrowser
from io import StringIO
from urllib.parse import quote_plus
unicode = str

KUBE_CMD = "kubectl"

NEW_DEPLOYMENT = "example"
DOCKER_RUN = "-i -t golang:1.8 /bin/bash"
CONTEXT = "default-system"
LOGFILE = ".telepresence.log"
NAMESPACE = "default"
cluster = "default-cluster"
server = "http://127.0.0.1:8080"
EXPOSE = []


# Don't modify next line without modifying corresponding line in
# .bumpversion.cfg:
__version__ = "0.52"
# Test runs can override version so we use specific custom Docker images:
if os.environ.get("TELEPRESENCE_VERSION") is not None:
    __version__ = os.environ["TELEPRESENCE_VERSION"]
REGISTRY = os.environ.get("TELEPRESENCE_REGISTRY", "datawire")
TELEPRESENCE_REMOTE_IMAGE = "{}/telepresence-k8s:{}".format(
    REGISTRY, __version__
)
TELEPRESENCE_LOCAL_IMAGE = "{}/telepresence-local:{}".format(
    REGISTRY, __version__
)

# IP that shouldn't be in use on Internet, *or* local networks:
MAC_LOOPBACK_IP = "198.18.0.254"

# Whether Docker requires sudo
SUDO_FOR_DOCKER = os.path.exists("/var/run/docker.sock") and not os.access(
    "/var/run/docker.sock", os.W_OK
)


def random_name():
    """Return a random name for a container."""
    return "telepresence-{}-{}".format(time(), os.getpid()).replace(".", "-")


def find_free_port():
    """
    Find a port that isn't in use.

    XXX race condition-prone.
    """
    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    try:
        s.bind(("", 0))
        return s.getsockname()[1]
    finally:
        s.close()


class Runner(object):
    """Context for running subprocesses."""

    def __init__(self, logfile, kubectl_cmd, verbose):
        """
        :param logfile: file-like object to write logs to.
        :param kubectl_cmd: Command to run for kubectl, either "kubectl" or
            "oc" (for OpenShift Origin).
        :param verbose: Whether subcommand should run in verbose mode.
        """
        self.logfile = logfile
        self.kubectl_cmd = kubectl_cmd
        self.verbose = verbose

    @classmethod
    def open(cls, logfile_path, kubectl_cmd, verbose):
        """
        :return: File-like object for the given logfile path.
        """
        if logfile_path == "-":
            return cls(sys.stdout, kubectl_cmd, verbose)
        else:
            # Wipe existing logfile, and use line buffering so data gets
            # written out immediately.
            if os.path.exists(logfile_path):
                os.remove(logfile_path)
            return cls(
                open(logfile_path, "a", buffering=1), kubectl_cmd, verbose
            )

    def write(self, message):
        """Write a message to the log."""
        self.logfile.write(message)
        self.logfile.flush()

    def check_call(self, *args, **kwargs):
        """Run a subprocess, make sure it exited with 0."""
        self.write("Running: {}... ".format(args))
        if "input" not in kwargs and "stdin" not in kwargs:
            kwargs["stdin"] = DEVNULL
        run(
            *args,
            stdout=self.logfile,
            stderr=self.logfile,
            check=True,
            **kwargs
        )
        self.write(" ran!\n")

    def get_output(self, *args, stderr=None, **kwargs):
        """Return (stripped) command result as unicode string."""
        if stderr is None:
            stderr = self.logfile
        self.write("Running: {}...".format(args))
        result = unicode(
            check_output(*args, stdin=DEVNULL, stderr=stderr,
                         **kwargs).strip(), "utf-8"
        )
        self.write(" ran!\n")
        return result

    def popen(self, *args, stdin=DEVNULL, **kwargs):
        """Return Popen object."""
        self.write("Running: {}...".format(args))
        return Popen(
            *args,
            stdin=stdin,
            stderr=self.logfile,
            stdout=self.logfile,
            **kwargs
        )

    def kubectl(self, context, namespace, args):
        """Return command-line for running kubectl."""
        result = [self.kubectl_cmd]
        if self.verbose:
            result.append("--v=4")
        result.extend(["--context", context])
        result.extend(["--namespace", namespace])
        result += args
        return result

    def get_kubectl(self, context, namespace, args, stderr=None):
        """Return output of running kubectl."""
        return self.get_output(
            self.kubectl(context, namespace, args), stderr=stderr
        )

    def check_kubectl(self, context, namespace, kubectl_args, **kwargs):
        """Check exit code of running kubectl."""
        self.check_call(
            self.kubectl(context, namespace, kubectl_args), **kwargs
        )

class RemoteInfo(object):
    """
    Information about the remote setup.

    :ivar namespace str: The Kubernetes namespace.
    :ivar context str: The Kubernetes context.
    :ivar deployment_name str: The name of the Deployment object.
    :ivar pod_name str: The name of the pod created by the Deployment.
    :ivar deployment_config dict: The decoded k8s object (i.e. JSON/YAML).
    :ivar container_config dict: The container within the Deployment JSON.
    :ivar container_name str: The name of the container.
    """

    def __init__(
        self,
        runner,
        context,
        namespace,
        deployment_name,
        pod_name,
        deployment_config,
    ):
        self.context = context
        self.namespace = namespace
        self.deployment_name = deployment_name
        self.pod_name = pod_name
        self.deployment_config = deployment_config
        cs = deployment_config["spec"]["template"]["spec"]["containers"]
        containers = [c for c in cs if "telepresence-k8s" in c["image"]]
        if not containers:
            raise RuntimeError(
                "Could not find container with image "
                "'datawire/telepresence-k8s' in pod {}.".format(pod_name)
            )
        self.container_config = containers[0]
        self.container_name = self.container_config["name"]

    def remote_telepresence_version(self):
        """Return the version used by the remote Telepresence container."""
        return self.container_config["image"].split(":")[-1]


def _get_service_names(environment):
    """Return names of Services, as used in env variable names."""
    # Order matters for service_keys, need it to be consistent with port
    # forwarding order in remote container.
    result = [
        key[:-len("_SERVICE_HOST")] for key in environment
        if key.endswith("_SERVICE_HOST")
    ]
    result.sort()
    return result


def _get_remote_env(runner, context, namespace, pod_name, container_name):
    """Get the environment variables in the remote pod."""
    env = runner.get_kubectl(
        context, namespace,
        ["exec", pod_name, "--container", container_name, "env"]
    )
    result = {}
    for line in env.splitlines():
        key, value = line.split("=", 1)
        result[key] = value
    return result


def get_deployment_set_keys(remote_info):
    """Get the set of environment variables names set by the Deployment."""
    return set([
        var["name"] for var in remote_info.container_config.get("env", [])
    ])


def get_env_variables(runner, remote_info, context):
    """
    Generate environment variables that match kubernetes.
    """
    # Get the environment:
    remote_env = _get_remote_env(
        runner, context, remote_info.namespace, remote_info.pod_name,
        remote_info.container_name
    )
    service_names = _get_service_names(remote_env)
    deployment_set_keys = get_deployment_set_keys(remote_info)
    # Tell local process about the remote setup, useful for testing and
    # debugging:
    socks_result = {
        "TELEPRESENCE_POD": remote_info.pod_name,
        "TELEPRESENCE_CONTAINER": remote_info.container_name
    }
    # ips proxied via socks, can copy addresses unmodified:
    for key, value in remote_env.items():
        if key in deployment_set_keys:
            # Copy over Deployment-set env variables:
            socks_result[key] = value
        for service_name in service_names:
            # Copy over Service env variables to SOCKS variant:
            if key.startswith(service_name + "_") and (
                key.endswith("_ADDR") or key.endswith("_PORT") or
                key.endswith("_PROTO") or key.endswith("_HOST") or
                key.endswith("_TCP")
            ):
                socks_result[key] = value
    return socks_result


def get_deployment_json(runner, deployment_name, context, namespace, deployment_type, run_id=None):
    """Get the decoded JSON for a deployment.

    If this is a Deployment we created, the run_id is also passed in - this is
    the uuid we set for the telepresence label. Otherwise run_id is None and
    the Deployment name must be used to locate the Deployment.
    """
    assert context is not None
    assert namespace is not None
    try:
        get_deployment = [
            "get",
            deployment_type,
            "-o",
            "json",
            "--export",
        ]
        if run_id is None:
            return json.loads(
                runner.get_kubectl(
                    context,
                    namespace,
                    get_deployment + [deployment_name],
                    stderr=STDOUT
                )
            )
        else:
            # When using a selector we get a list of objects, not just one:
            return json.loads(
                runner.get_kubectl(
                    context,
                    namespace,
                    get_deployment + ["--selector=telepresence=" + run_id],
                    stderr=STDOUT
                )
            )["items"][0]
    except CalledProcessError as e:
        raise SystemExit(
            "Failed to find Deployment '{}': {}".
            format(deployment_name, str(e.stdout, "utf-8"))
        )


def get_remote_info(runner, deployment_name, context, namespace, deployment_type, run_id=None):
    """
    Given the deployment name, return a RemoteInfo object.

    If this is a Deployment we created, the run_id is also passed in - this is
    the uuid we set for the telepresence label. Otherwise run_id is None and
    the Deployment name must be used to locate the Deployment.
    """
    deployment = get_deployment_json(
        runner,
        deployment_name,
        context,
        namespace,
        deployment_type,
        run_id=run_id
    )
    expected_metadata = deployment["spec"]["template"]["metadata"]
    runner.write("Expected metadata for pods: {}\n".format(expected_metadata))

    start = time()
    while time() - start < 120:
        pods = json.loads(
            runner.get_kubectl(
                context, namespace, ["get", "pod", "-o", "json", "--export"]
            )
        )["items"]
        for pod in pods:
            name = pod["metadata"]["name"]
            phase = pod["status"]["phase"]
            runner.write(
                "Checking {} (phase {})...\n".
                format(pod["metadata"].get("labels"), phase)
            )
            if not set(expected_metadata.get("labels", {}).items(
            )).issubset(set(pod["metadata"].get("labels", {}).items())):
                runner.write("Labels don't match.\n")
                continue
            # Metadata for Deployment will hopefully have a namespace. If not,
            # fall back to one we were given. If we weren't given one, best we
            # can do is choose "default".
            if (name.startswith(deployment_name + "-")
                and
                pod["metadata"]["namespace"] == deployment["metadata"].get(
                    "namespace", namespace)
                and
                phase in (
                    "Pending", "Running"
            )):
                runner.write("Looks like we've found our pod!\n")
                remote_info = RemoteInfo(
                    runner,
                    context,
                    namespace,
                    deployment_name,
                    name,
                    deployment,
                )
                # Ensure remote container is running same version as we are:
                if remote_info.remote_telepresence_version() != __version__:
                    raise SystemExit((
                        "The remote datawire/telepresence-k8s container is " +
                        "running version {}, but this tool is version {}. " +
                        "Please make sure both are running the same version."
                    ).format(
                        remote_info.remote_telepresence_version(), __version__
                    ))
                # Wait for pod to be running:
                wait_for_pod(runner, remote_info)
                return remote_info

        # Didn't find pod...
        sleep(1)

    raise RuntimeError(
        "Telepresence pod not found for Deployment '{}'.".
        format(deployment_name)
    )


def kill_process(process):
    """Kill a process, make sure it's a dead."""
    if process.poll() is None:
        process.terminate()
    try:
        process.wait(timeout=1)
    except TimeoutExpired:
        process.kill()
        process.wait()


class Subprocesses(object):
    """Shut down subprocesses on exit."""

    def __init__(self):
        self.subprocesses = {}
        atexit.register(self.killall)

    def append(self, process, killer=None):
        if killer is None:

            def kill():
                kill_process(process)

            killer = kill
        self.subprocesses[process] = killer

    def killall(self):
        for killer in self.subprocesses.values():
            killer()

    def any_dead(self):
        """
        Check if any processes are dead.

        If they're all alive, return None.

        If not, kill the remaining ones and return the failed process' poll()
        result.
        """
        for p in self.subprocesses:
            code = p.poll()
            if code is not None:
                self.killall()
                return p


class SSH(object):
    """Run ssh to k8s-proxy with appropriate arguments."""

    def __init__(self, runner, port, host="localhost"):
        self.runner = runner
        self.port = port
        self.host = host

    def command(self, additional_args, prepend_arguments=[]):
        """Return command line argument list for running ssh."""
        return ["ssh"] + prepend_arguments + [
            # Ignore local configuration (~/.ssh/config)
            "-F",
            "/dev/null",
            # SSH with no warnings:
            "-vv" if self.runner.verbose else "-q",
            # Don't validate host key:
            "-oStrictHostKeyChecking=no",
            # Don't store host key:
            "-oUserKnownHostsFile=/dev/null",
            "-p",
            str(self.port),
            "telepresence@" + self.host,
        ] + additional_args

    def popen(self, additional_args):
        """Connect to remote pod via SSH.

        Returns Popen object.
        """
        return self.runner.popen(
            self.command(
                additional_args,
                [
                    # No remote command, since this intended for things like -L
                    # or -R where we don't want to run a remote command.
                    "-N",
                    # Ping once a second; after ten retries will disconnect:
                    "-oServerAliveInterval=1",
                    "-oServerAliveCountMax=10",
                ]
            )
        )

    def wait(self):
        """Return when SSH server can be reached."""
        start = time()
        while time() - start < 30:
            try:
                self.runner.check_call(self.command(["/bin/true"]))
            except CalledProcessError:
                sleep(0.25)
            else:
                return
        raise RuntimeError("SSH isn't starting.")


def wait_for_pod(runner, remote_info):
    start = time()
    while time() - start < 120:
        try:
            pod = json.loads(
                runner.get_kubectl(
                    remote_info.context, remote_info.namespace,
                    ["get", "pod", remote_info.pod_name, "-o", "json"]
                )
            )
        except CalledProcessError:
            sleep(0.25)
            continue
        if pod["status"]["phase"] == "Running":
            for container in pod["status"]["containerStatuses"]:
                if container["name"] == remote_info.container_name and (
                    container["ready"]
                ):
                    return
        sleep(0.25)
    raise RuntimeError(
        "Pod isn't starting or can't be found: {}".format(pod["status"])
    )


def connect(runner, remote_info):

    processes = Subprocesses()
    ssh = SSH(runner, find_free_port())

    # forward remote port to here, by tunneling via remote SSH server:
    processes.append(
        runner.popen(
            runner.kubectl(
                CONTEXT, remote_info.namespace, [
                    "port-forward", remote_info.pod_name,
                    "{}:8022".format(ssh.port)
                ]
            )
        )
    )
    docker_interface = re.findall(
        r"(\d+\.\d+\.\d+\.\d+)",
        runner.get_output(["ip", "addr", "show", "dev", "docker0"])
    )[0]

    processes.append(
        runner.popen([
            "socat", "TCP4-LISTEN:{},bind={},reuseaddr,fork".format(
                ssh.port,
                docker_interface,
            ), "TCP4:127.0.0.1:{}".format(ssh.port)
        ])
    )

    ssh.wait()

    socks_port = find_free_port()

    return processes, socks_port, ssh


def wait_for_exit(runner, main_process, processes):
    """Given Popens, wait for one of them to die."""
    while True:
        sleep(0.1)
        if main_process.poll() is not None:
            # Shell exited, we're done. Automatic shutdown cleanup will kill
            # subprocesses.
            raise SystemExit(main_process.poll())
        dead_process = processes.any_dead()
        if dead_process:
            # Unfortunatly torsocks doesn't deal well with connections
            # being lost, so best we can do is shut down.
            runner.write((
                "A subprocess ({}) died with code {}, " +
                "killed all processes...\n"
            ).format(dead_process.args, dead_process.returncode))
            if sys.stderr.isatty:
                print(
                    "Proxy to Kubernetes exited. This is typically due to"
                    " a lost connection.",
                    file=sys.stderr
                )
            raise SystemExit(3)


def mount_remote_volumes(runner, remote_info, ssh):
    """
    sshfs is used to mount the remote system locally.

    Allowing all users may require root, so we use sudo in that case.
    """
    # Docker for Mac only shares some folders; the default TMPDIR on OS X is
    # not one of them, so make sure we use /tmp:
    mount_dir = mkdtemp(dir="/tmp")
    prefix = ["sudo"]
    middle = ["-o", "allow_other"]
    try:
        runner.check_call(
            prefix + [
                "sshfs",
                "-p",
                str(ssh.port),
                # Don't load config file so it doesn't break us:
                "-F",
                "/dev/null",
                # Don't validate host key:
                "-o",
                "StrictHostKeyChecking=no",
                # Don't store host key:
                "-o",
                "UserKnownHostsFile=/dev/null",
            ] + middle + ["telepresence@localhost:/", mount_dir]
        )
        mounted = True
    except CalledProcessError:
        print(
            "Mounting remote volumes failed, they will be unavailable"
            " in this session. This is a known issue when running inside"
            " Docker or on Windows Subystem for Linux. See"
            " https://github.com/datawire/telepresence/issues/115 for"
            " details. If you are not running in those environments"
            " then please report a bug, attaching telepresence.log to"
            " the bug report.",
            file=sys.stderr
        )
        mounted = False
    return mount_dir, mounted


# Script to dump resolved IPs to stdout as JSON list:
_GET_IPS_PY = """
import socket, sys, json

result = []
for host in sys.argv[1:]:
    result.append(socket.gethostbyname(host))
sys.stdout.write(json.dumps(result))
sys.stdout.flush()
"""


def get_proxy_cidrs(runner, remote_info, service_address):
    """
    Figure out which IP ranges to route via sshuttle.

    1. Given the IP address of a service, figure out IP ranges used by
       Kubernetes services. We assume /16 for the services.
    2. Extract pod ranges from API.
    3. Any hostnames/IPs given by the user using --also-proxy.

    See https://github.com/kubernetes/kubernetes/issues/25533 for eventual
    long-term solution for service CIDR.
    """

    # Run script to convert --also-proxy hostnames to IPs, doing name
    # resolution inside Kubernetes, so we get cloud-local IP addresses for
    # cloud resources:
    def resolve_ips():
        return json.loads(
            runner.get_kubectl(
                CONTEXT, NAMESPACE, [
                    "exec", "--container=" + remote_info.container_name,
                    remote_info.pod_name, "--", "python3", "-c", _GET_IPS_PY
                ]
            )
        )

    try:
        result = set([ip + "/32" for ip in resolve_ips()])
    except CalledProcessError as e:
        runner.write(str(e))
        raise SystemExit(
            "We failed to do a DNS lookup inside Kubernetes for the "
            "hostname(s) you listed in "
            "--also-proxy ({}). Maybe you mistyped one of them?"
        )

    print(result)
    def ip_to_16range(ip):
        # Convert IP address, e.g. '10.3.241.23', into 16 bit range, in this
        # case '10.3.0.0/16':
        return ".".join(ip.split(".")[:2] + ["0", "0"]) + "/16"

    # Get pod IPs from nodes if possible, otherwise use pod IPs as heuristic:
    try:
        nodes = json.loads(
            runner.
            get_output([runner.kubectl_cmd, "get", "nodes", "-o", "json"])
        )["items"]
    except CalledProcessError as e:
        runner.write("Failed to get nodes: {}".format(e))
        # Fallback to using pod IPs:
        pods = json.loads(
            runner.
            get_output([runner.kubectl_cmd, "get", "pods", "-o", "json"])
        )["items"]
        for pod in pods:
            result.add(ip_to_16range(pod["status"]["podIP"]))
    else:
        for node in nodes:
            pod_cidr = node["spec"].get("podCIDR")
            if pod_cidr is not None:
                result.add(pod_cidr)

    # Add service IP range, based on heuristic:
    result.add(ip_to_16range(service_address))

    return list(result)


def docker_runify(args):
    """Prepend 'docker run' to a list of arguments."""
    args = ['docker', 'run'] + args
    if SUDO_FOR_DOCKER:
        return ["sudo"] + args
    else:
        return args


def make_docker_kill(runner, name):
    """Return a function that will kill a named docker container."""

    def kill():
        sudo = ["sudo"] if SUDO_FOR_DOCKER else []
        runner.check_call(sudo + ["docker", "stop", "--time=1", name])

    return kill


def connect_docker(runner, remote_info, subprocesses, env, ssh):
    """Connect using sshuttle running in a Docker container."""
    # Start the sshuttle container:
    name = random_name()
    config = {
        "port":
        ssh.port,
        "cidrs":
        get_proxy_cidrs(
            runner, remote_info, env["KUBERNETES_SERVICE_HOST"]
        ),
        "expose_ports":
        EXPOSE,
    }

    # Image already has tini init so doesn't need --init option:
    subprocesses.append(
        runner.popen(
            docker_runify([
                "--rm", "--privileged", "--name=" + name,
                TELEPRESENCE_LOCAL_IMAGE, "proxy", json.dumps(config)
            ])
        ), make_docker_kill(runner, name)
    )
    # Write out env file:
    with NamedTemporaryFile("w", delete=False) as envfile:
        for key, value in env.items():
            envfile.write("{}={}\n".format(key, value))
    atexit.register(os.remove, envfile.name)

    # Wait for sshuttle to be running:
    while True:
        try:
            runner.check_call(
                docker_runify([
                    "--network=container:" + name, "--rm",
                    TELEPRESENCE_LOCAL_IMAGE, "wait"
                ])
            )
        except CalledProcessError as e:
            if e.returncode == 100:
                # We're good!
                return name, envfile.name
            elif e.returncode == 125:
                # Docker failure, probably due to original container not
                # starting yet... so sleep and try again:
                sleep(1)
                continue
            else:
                raise
        else:
            raise RuntimeError(
                "Waiting container exited prematurely. File a bug, please!"
            )


def run_local_command(runner, remote_info, env_overrides, subprocesses, socks_port, ssh):
    """--run-shell/--run support, run command locally."""
    env = os.environ.copy()
    env.update(env_overrides)

    # Don't use runner.popen() since we want to give program access to current
    # stdout and stderr if it wants it.
    env["PROMPT_COMMAND"] = (
        'PS1="@{}|$PS1";unset PROMPT_COMMAND'.format(CONTEXT)
    )

    # Mount remote filesystem. We allow all users if we're using Docker because
    # we don't know what uid the Docker container will use:
    mount_dir, mounted = mount_remote_volumes(runner, remote_info, ssh)
    env["TELEPRESENCE_ROOT"] = mount_dir

    proxy_container_name, envfile_path = connect_docker(
        runner, remote_info, subprocesses, env, ssh
    )
    container_name = random_name()
    docker_command = docker_runify([
        "--volume={}:{}".format(
            env["TELEPRESENCE_ROOT"], env["TELEPRESENCE_ROOT"]
        ),
        "--name=" + container_name,
        "--network=container:" + proxy_container_name,
        "--env-file",
        envfile_path,
    ])

    # Older versions of Docker don't have --init:
    if "--init" in runner.get_output(["docker", "run", "--help"]):
        docker_command += ["--init"]
    docker_command += DOCKER_RUN

    p = Popen(docker_command, env=env)

    def terminate_if_alive():
        runner.write("Shutting down local process...\n")
        if p.poll() is None:
            runner.write("Killing local process...\n")
            make_docker_kill(runner, container_name)()

        if mounted:
            runner.check_call(["fusermount", "-z", "-u", mount_dir])

    atexit.register(terminate_if_alive)
    wait_for_exit(runner, p, subprocesses)


def main():
    # Make SIGTERM do clean shutdown (in particular, we want atexit functions
    # to be called):
    def shutdown(signum, frame):
        raise SystemExit(0)

    signal.signal(signal.SIGTERM, shutdown)

    runner = Runner.open(LOGFILE, KUBE_CMD, True)

    run_id = str(uuid4())
    command = [
        "run",
        # This will result in using Deployment:
        "--restart=Always",
        "--limits=memory=256Mi",
        "--requests=memory=64Mi",
        NEW_DEPLOYMENT,
        "--image=" + TELEPRESENCE_REMOTE_IMAGE,
        "--labels=telepresence=" + run_id,
    ]

    for port in EXPOSE:
        command.append("--port={}".format(port))

    if EXPOSE:
        command.append("--expose")

    runner.get_kubectl(CONTEXT, NAMESPACE, command)

    remote_info = get_remote_info(
        runner,
        NEW_DEPLOYMENT,
        CONTEXT,
        NAMESPACE,
        "deployment",
        run_id=run_id,
    )

    processes, socks_port, ssh = connect(runner, remote_info)
    sleep(2)
    env = get_env_variables(runner, remote_info, CONTEXT)

    run_local_command(runner, remote_info, env, processes, socks_port, ssh)


if __name__ == '__main__':
    main()
